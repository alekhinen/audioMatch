Last Updated: 10/30/14

-------------
 Description
-------------

Dan is a prototype app for the Software Development semester project.
Dan was created to fulfill the requirements of Assignment 5, listed here:

http://www.ccs.neu.edu/course/cs4500f14/assignment5.txt

Dan is an audio recognition software designed to detect the use
of copyright protected music in digital audio and video media. The 
full version of this software will be able to scan large collections
of multiple file types and search for multiple potential violations. 
For this prototype, the project scope is limited to detecting similarity
between two wav files of the same length. To complete the requirements
of assignment 5, the prototype is also able to compare the contents
of a directory all at once.


--------------
 Project Team
--------------

Nick Alekhine       - alekhine.n@husky.neu.edu
Michael Chadbourne  - chadbourne.m@husky.neu.edu
Charles Perrone     - perrone.c@husky.neu.edu
John Meenagh        - jpmeenagh@gmail.com

Github - https://github.com/alekhinen/assignment4


-------
 Setup
-------

After downloading the submission, unpack the .tar.gz file in 
the command line with the tar command:

	tar -zxvf assignment5.tar.gz

Enter the assignment5 directory with the cd command and run the 
Dan app with the command(s) listed in 'Command Line Arguments' section below.


------------------------
 Command Line Arguments
------------------------
 
Command Forms: 

    ./dan -f <pathname> -f <pathname>
    ./dan -d <pathname> -d <pathname>
    ./dan -f <pathname> -d <pathname>
    ./dan -d <pathname> -f <pathname>

<pathname> should be existing Linux path names that end in '.wav' or '.mp3'

-if the <pathname> is preceded by a "-d" it must be an existing directory
where all the files within would be valid as a single file input (-f)
-if the <pathname> is preceded by a "-f" and ends in ".wav" the file
must be in little-endian (RIFF) WAVE format with PCM encoding (AudioFormat
 1), stereo or mono, 8- or 16-bit samples, with a sampling rate of 11.025,
22.05, 44.1, or 48 kHz
-if the <pathname> is preceded by a "-f" and ends in ".mp3" the file
must be in MPEG-1 Audio Layer III format (MP3)  

If both files are directories, a comparison will be made between each
file in the first directory against each file in the second. The 
comparisons will print in order such that the first file in the first
directory will be compared to the first file in the second directory
followed by the the first file in the first directory compared to the 
second file in the second directory. Once the first file has been 
compared to each file in the second directory in this manner, the 
second file in the first directory will then be compared to the first 
file in the second, and so on in that fashion, until all comparisons 
have been made between each file in the two directories. 

If one of the <pathname>s provided is a directory and the other is 
a file, the single file will be compared against each file in the 
directory.

Example: 

        ./dan -f /audio/z01.wav -d /audioMP3s

This command would compare the .wav file z01.wav against each file in
the audioMP3 directory.


--------
 Output
--------

If the two files are found to NOT sound similar, the program will print
nothing and terminate with an exit status of 0.

If the two files ARE found to sound similar, the program will print
"Match" followed by a space, followed by the short name of the first file, 
followed by a space, followed by the short name of the second file, followed 
by a newline to the command line and terminate with an exit status of 0.

The following Errors may occur:

-if a provided file path does not exist-
Prints 'ERROR: Supplied pathname(s) does not exist.' 
followed by a newline with an exit status of 1. 

-if a provided file path is mis-flagged as directory or file (-f or -d)-
"Error: flagged a directory that was not a directory or flagged a file 
that was not a file" 
followed by a newline with an exit status of 1. 

-if a provided file path is not a valid format- 
"Error: Supplied file(s) are not valid" 
followed by a newline with an exit status of 1.

-if anything other than two flags and two paths are provided- 
"Error: Exactly two sets of flags and paths have to be specified" 
followed by a newline with an exit status of 1.

-if anything other than -f or -d are used as flags- 
"Error: improper flagtype supplied" 
followed by a newline with an exit status of 1.


------------------
 Project Contents
------------------

The project should contain the following files:

tests          - (directory) a collection of test scripts
.gitignore     - (GITIGNORE file) an unnamed file to tell GitHub what to save
README         - (file) a readme for the dan app
__init__.py    - (PY file) tells the Python where to import modules from    
adder.py       - (PY file) takes fft files data and puts it in the database 
checker.py     - (PY file) compares files with preliminary matches in database
comparator.py  - (PY file) compares the segments of parsed files 
copyconvert.py - (PY file) copies converted files into /tmp directory
dan            - (file) executable file to take the arguments and run the app
lame           - (binary file) mp3 encoder 
logger.py      - (PY file) outputs text to the command line
parser.py      - (PY file) takes input from the command line
processor.py   - (PY file) processes files into fft's
validator.py   - (PY file) checks whether command line input is valid

-Contents of the 'tests' directory-
__init__.py   - (PY file) tells the Python where to import modules from
whitebox.py   - (PY file) script to run whitebox tests


-----------
 Packages
-----------

The following packages were used in addition to the Standard Python Library:

NumPy
SciPy
nose (tests)


-------
 Tests
-------

The 'tests' directory contains a file whitebox.py for whitebox testing. This 
file contains two functions which each run a set of tests to check file 
validation and comparison. The tests use the assert_equals function from the 
nose.tools library. The functions go through a series of test cases using
small example files from the 'audio' directory.

The tests can be run by cd'ing to the 'tests' directory and running the
following command:

	nosetests whitebox


-----------
 Algorithm
-----------

To compare files, the program converts mp3 and wav files using the Fast 
Fourier Transform function in the SciPy Library. This converts the file 
to amplitude over frequency. We then set a threshold of 500,000, meaning
we only compare amplitudes that are over that many decibels, before 
checking the two outputs for similarity.   

